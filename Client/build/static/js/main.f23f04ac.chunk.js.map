{"version":3,"sources":["components/CSS Modules/header-style.module.css","components/CSS Modules/FileInputButtons-style.module.css","components/Header.js","components/UploadFile.js","components/ContractInteraction.js","components/UploadMetadata.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","className","styles","headerblue","headerText","PROJECT_ID","PROJECT_SECRET","Cid","UploadFile","useState","selectedFile","setSelectedFile","isFilePicked","setIsFilePicked","isSubmitted","setSubmission","a","formData","FormData","append","console","log","xhr","XMLHttpRequest","open","setRequestHeader","btoa","send","onload","JSON","parse","response","Hash","componentheaders","componentspacing","type","accept","name","onChange","event","target","files","customfileinput","FileinputText","uploadFile","SubmitButton","onClick","URLallignment","ContractInteraction","props","accounts","setAccounts","undefined","setWeb3","contract","setContract","uri","setUri","tokenID","setTokenID","tokenExists","setTokenExists","reciever","setReciever","url","setUrl","doesntExist","setDoesntExist","connectionStatus","setConnectionStatus","owner","setOwner","transactionStatus","setTransactionStatus","init","CIDkey","tokenIDs","Web3","window","ethereum","web3","eth","getAccounts","net","getId","networkId","deployedNetwork","MusicOwnership","networks","Contract","abi","address","alert","error","detectEthereumProvider","mustBeMetaMask","provider","request","method","params","chainId","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","methods","tokenURI","call","mint","from","gas","stringify","ownerOf","transferFrom","configureAndConnectMetamask","onSubmit","evt","preventDefault","showCIDs","RetrieveTokenURL","value","e","column","Mint","UploadMetadata","isFileSubmited","setFileIsSubmitted","showCID","setShowCID","Fragment","handleSubmission","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f23f04ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerblue\":\"header-style_headerblue__2yV9D\",\"headerText\":\"header-style_headerText__1UuA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"componentspacing\":\"FileInputButtons-style_componentspacing__2xsw_\",\"componentheaders\":\"FileInputButtons-style_componentheaders__25bJg\",\"URLallignment\":\"FileInputButtons-style_URLallignment__3OA14\",\"backround\":\"FileInputButtons-style_backround__1IONB\"};","import React from 'react';\nimport styles from './CSS Modules/header-style.module.css';\nconst Header = () => {\n    \n    return (\n        <header className={styles.headerblue}>\n        <h1 className={styles.headerText}>Log Your Music.</h1>\n        </header>\n    )\n}\n\nexport default Header","import React, {useState} from 'react'\nimport styles from './CSS Modules/FileInputButtons-style.module.css';\n\n///////Global Variables//////\nconst PROJECT_ID = '1z2zKzXJSnmfHxjLo8APH4Ljxhl';\nconst PROJECT_SECRET = '796b649fad2aac594c4767a8abcd7be4';\nvar Cid = '';\n\n\nfunction UploadFile() \n{\n  const [selectedFile, setSelectedFile] = useState();\n  const [isFilePicked, setIsFilePicked] = useState(false);\n  const [isSubmitted, setSubmission] = useState(false);\n\n   const changeHandler = (event) => {\n\t setSelectedFile(event.target.files[0]);\n    setIsFilePicked(true);\n  };\n     \n  async function handleSubmission() {\n\tconst formData = new FormData();\n\tawait formData.append('Submitted File', selectedFile);\n  console.log(formData);\n  \n  const xhr =  new XMLHttpRequest();\n  await xhr.open(\n    \"POST\",\n    \"https://ipfs.infura.io:5001/api/v0/add\"\n  );\n\n  await xhr.setRequestHeader(\n    \"Authorization\", \n    \"Basic\" + btoa(PROJECT_ID + \":\" + PROJECT_SECRET)\n  );\n\n  await xhr.send(formData); \n  \n   xhr.onload = () => {\n    Cid = JSON.parse(`${xhr.response}`);\n    setSelectedFile(Cid.Hash);\n    if (Cid.Hash =! null)\n      {\n        setSubmission(true);\n      }\n    }  \n  }\n\n    \n\n  return (\n  <div className = {styles.componentheaders}>\n    <div className = {styles.componentspacing}>\n      <h2>1. Upload An Audio Track:</h2>\n      <input type=\"file\" accept=\".mp3,.wav,.aiff,.FLAC\" name=\"file\" onChange={changeHandler} className={styles.customfileinput}/>\n      {isFilePicked ? (\n        <div>\n\t\t\t\t  <h5 className={styles.FileinputText}> File Name: {selectedFile.name} </h5>\n\t\t\t  </div>\n      ) : (\n      <p className={styles.uploadFile}></p>)}<br/>\n        <div>\n          <button className={styles.SubmitButton} onClick={handleSubmission} > Submit File</button> \n          {isSubmitted ? \n            (<div className={styles.URLallignment}>\n              <h5 className={styles.URLallignment}>Address: {'https://ipfs.io/ipfs/' + selectedFile} </h5>\n              <h5 className={styles.FileinputText}>SUCCESFULLY UPLOADED</h5>\n            </div> \n            ) : (\n            <p className={styles.uploadFile}></p>\n            ) \n          }\n        </div>\n    </div>\n  </div>\n);\n}\nexport default UploadFile","import React, {useState} from 'react';\nimport MusicOwnership from '../artifacts/MusicOwnership.json';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport styles from './CSS Modules/FileInputButtons-style.module.css';\n\nfunction ContractInteraction (props) {\n\n  ///////Webpage State components///////\n  const [accounts, setAccounts] = useState([]); //state variable for accounts\n  const [web3, setWeb3] = useState (undefined); //web3 state\n  const [contract, setContract] = useState (undefined); //contract state\n  const [uri, setUri] = useState (undefined); //Uri code State\n  const [tokenID, setTokenID] = useState (undefined); //Token ID state\n  const [tokenExists, setTokenExists] = useState (false); //Triggers Token UI response on and off\n  const [reciever,setReciever ] = useState (undefined);\n  const [url, setUrl] = useState (undefined); //Metadata URL state\n  const [doesntExist, setDoesntExist] = useState(undefined); //switch for Token ID response\n  const [connectionStatus, setConnectionStatus] = useState(false);\n  const [owner, setOwner] = useState(undefined);\n  const [transactionStatus,setTransactionStatus] = useState(false);\n  \n    \n  //Initialise state variables and connect to Smart Contract//\n  async function init() {\n             \n    try {\n      const uri = await (props.CIDkey); \n      const tokenID = await (props.tokenIDs);   \n      const  web3 = await new Web3(window.ethereum);\n      const accounts = await  web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = MusicOwnership.networks[networkId];\n      const contract = await new web3.eth.Contract(\n      MusicOwnership.abi,\n      deployedNetwork && deployedNetwork.address\n      );\n      await setUri(uri);\n      await setWeb3(web3);\n      await setAccounts(accounts);\n      await setContract(contract);\n      }\n\n    catch (error) {\n      alert(`Failed to load web3, accounts or contract from the abi. Check console For details.`);\n      console.error(error);\n    }\n  }\n    \n  ///////Configure wallet and connect to Metamask///////\n\n  async function configureAndConnectMetamask() {\n    const provider = await detectEthereumProvider({\n      mustBeMetaMask: true\n      })\n    if (provider) {\n      try {\n        await provider.request({ method: 'eth_requestAccounts'})\n        await provider.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: '0x3', \n            chainName: 'Ropsten',\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n              },\n            rpcUrls: ['https://ropsten.infura.io/v3/b3b18fff97b6463ca552f9334d7fe15f'],\n            blockExplorerUrls: ['https://ropsten.etherscan.io']\n            }]\n          })\n        } \n      catch(e) {\n        console.error(e);\n        setConnectionStatus(true);\n        }  \n      } \n    else {\n      console.error('Please install MetaMask');\n      alert('Please install the MetaMask wallet extension in Chrome or Brave Browser');\n    }\n    await init();\n  }\n\n  ///////Function for submitting a token Id////////\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    console.log(props.showCIDs);\n    console.log(tokenID);\n    RetrieveTokenURL(tokenID);\n    }\n      \n  const handleChange = (e) => {\n  setTokenID(e.target.value)\n  }\n\n\n  ////////////Mint a new Token////////////\n  async function Mint() {\n    if (uri === undefined || tokenID === undefined) {\n      alert('please ensure a file first and that you have entered a numerical Identification number');\n      throw('please ensure a file is submitted first and that you have entered a numerical Identification number');\n    }\n             \n    let checkID = await contract.methods.tokenURI(tokenID).call();\n\n    if (checkID =! null)\n      {\n        alert('This ID number has been taken, please try a different number');\n        throw('This ID number has been taken, please try a different number');\n      }\n    try {\n        await contract.methods.mint(accounts[0],uri,tokenID).send({from:accounts[0], gas: 1000000});\n      }\n    catch(error) {\n      alert('Transaction Failed');\n      throw('Transaction Failed');\n    }\n    alert('You succesfully minted your token.');\n  }\n\n  ///User input for TokenID request///\n  const handleRecieverSubmit = (evt) => {\n    evt.preventDefault();\n    alert(`Submitting ID: ${reciever}`)\n    setReciever(reciever);\n    }\n  const handleRecieverChange = (e) => {\n  setReciever(e.target.value)\n  }\n\n  /////////Retrieve a Token's Metadata and source File/////////\n  async function RetrieveTokenURL() {\n    if (tokenID === undefined)\n      {\n        alert('please enter a numerical Identification number');\n        throw('please enter a numerical Identification number');\n      }\n            \n    try {\n      const url = await contract.methods.tokenURI(tokenID).call();\n      setUrl(url);\n      console.log(JSON.stringify(url));\n      const owner = await contract.methods.ownerOf(tokenID).call();\n      setOwner(owner);\n      setTokenExists(true);\n    }\n    catch(error){\n    setDoesntExist('This Token ID does not exist and is available to be used');\n    setTokenExists(false);\n    }\n  }\n\n              \n  async function TransferToken()  {\n    console.log(reciever);\n    console.log(tokenID);\n    console.log(accounts[0]);\n    if ({reciever} == null || {tokenID} == null || accounts[0] == null){\n      alert('Please ensure an address to send the token to has been submitted.\\nPlease also ensure a token identifier has been submitted')\n      throw('Please ensure an address to send the token to has been submitted.\\nPlease also ensure a token identifier has been submitted')\n    }\n\n    try {\n      await contract.methods.transferFrom(accounts[0],reciever,tokenID).send({from:accounts[0], gas: 1000000});\n      console.log(reciever)\n      setTransactionStatus(true);\n      }\n    catch(error)  {\n      alert('Transaction failed. \\nPlease ensure the token you wish to transfer exists and that you`re wallet contains the token');\n    }\n  }\n\n  return (\n    <div>\n      <div className = {styles.componentheaders}> \n        <div className = {styles.componentspacing}>\n        <h2>3. Connect To Your Wallet</h2>\n          <button onClick={() => configureAndConnectMetamask() }>Connect to Ropsten </button>\n        {connectionStatus ? (\n        <div> \n          <h3>Account:</h3>\n          <h5> {accounts[0]}</h5>\n        </div>) : (<h4>NotConnected</h4>)}\n        </div>\n      </div>\n     \n      <div className = {styles.componentheaders}> \n        <div className = {styles.componentspacing}>\n          <h2>4. Enter a TokenID</h2>\n          <form onSubmit= {handleSubmit}>\n          <input type=\"number\" value={tokenID} onChange= {handleChange}/>\n          <input type=\"submit\" value=\"Submit\" />\n          </form>\n\n          <div className={styles.column}>\n          {tokenExists ? (\n            <div>\n              <h3>Track {tokenID}:</h3> <h5>{url} </h5>\n              <h4>Owner of Track {tokenID}:</h4> <h5>{owner}</h5>\n            </div>\n            ) : (\n            <h4>{doesntExist}</h4>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className = {styles.componentheaders}> \n        <div className = {styles.componentspacing}>\n          <h2> 5. Mint Your Token</h2>\n          <button onClick = {() => Mint()}> Mint Token </button>\n        </div>\n      </div>\n\n      <div className = {styles.componentheaders}> \n        <div className = {styles.componentspacing}>\n          <h2>Transfer Ownership</h2>\n          <form onSubmit= {handleRecieverSubmit}> \n            <input type=\"text\" value={reciever} onChange= {handleRecieverChange}/>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n          {transactionStatus ? (\n         <h4>Transaction Was Succesfull</h4>\n          ) : (<p></p>)}\n          <button onClick={TransferToken}>Transfer Token</button>\n        </div>\n      </div>\n    </div>\n     \n  );\n}\nexport default ContractInteraction","import React, {useState} from 'react'\nimport styles from './CSS Modules/FileInputButtons-style.module.css';\nimport ContractInteraction from './ContractInteraction';\n\nconst PROJECT_ID = '1z2zKzXJSnmfHxjLo8APH4Ljxhl';\nconst PROJECT_SECRET = '796b649fad2aac594c4767a8abcd7be4';\n\nfunction UploadMetadata() {\n  const [selectedFile, setSelectedFile] = useState();\n  const [isFilePicked, setIsFilePicked] = useState(false);\n  const [isFileSubmited, setFileIsSubmitted] = useState(false);\n  const [showCID, setShowCID] = useState(null);\n      \n\n  const changeHandler = (event) => {\n\t\tsetSelectedFile(event.target.files[0]);\n    setIsFilePicked(true);\n  };\n     \n  const handleSubmission = () => {\n\t\tconst formData = new FormData();\n\t\tformData.append('Submitted File', selectedFile);\n    \n    const xhr = new XMLHttpRequest();\n    \n    xhr.open(\n      \"POST\",\n      \"https://ipfs.infura.io:5001/api/v0/add\"\n    );\n    \n    xhr.setRequestHeader(\n      \"Authorization\", \n      \"Basic \" + btoa(PROJECT_ID + \":\" + PROJECT_SECRET)\n    );\n    \n    xhr.send(formData);\n    \n    xhr.onload = () => {\n    var Cid = JSON.parse(`${xhr.response}`);\n    setShowCID(Cid.Hash);\n    if (Cid.Hash != null)\n      {\n      setFileIsSubmitted(true);\n      }\n    }  \n  }\n\n  return (\n    <React.Fragment>\n      <div>\n        <div className = {styles.componentheaders}>\n          <div className = {styles.componentspacing}>\n          <h2 >2. Upload Your Metadata JSON file: </h2>\n          <input type=\"file\" accept=\".json\" name=\"file\" onChange= {changeHandler} />\n          {isFilePicked ? (\n           <div>\n\t\t\t\t\t   <h5>Filename: {selectedFile.name}</h5>\n            </div>\n            ) : (<p></p>)}\n            <br/>\n            <div>\n              <button onClick= {() => handleSubmission() }>Submit</button> \n              {isFileSubmited ? (\n                <div>\n                 <h5>SUCCESFULLY UPLOADED</h5>\n                  <h5>You can view File at:</h5>\n\t\t\t\t\t        <h5> {'https://ipfs.io/ipfs/' + showCID}</h5>\n                </div> \n                ) : (\n              <p className={styles.uploadFile}></p>\n                )\n              }\n            </div>\n          </div>\n        </div>\n      <ContractInteraction showCIDs = {showCID} /> \n    </div>\n  </React.Fragment> \n  );\n}\nexport default UploadMetadata ","import React from 'react';\n/////////////COMPONENTS///////////////\nimport Header from './components/Header.js';\nimport UploadFile from './components/UploadFile.js';\nimport UploadMetadata from './components/UploadMetadata.js';\nimport './App.css';\n\nfunction App() {\nreturn (\n<div className='Backround'>\n  <Header />\n  <UploadFile />\n  <UploadMetadata />\n  <h5>To view transaction history on the blockchain visit:</h5>\n  <h5>https://ropsten.etherscan.io</h5> \n   <h5>and enter the contract address to view tranactions</h5>\n  <h5>Contract Address: 0x951F5f30F701A02551DcC30a9F8715C831Ec9c51</h5>\n</div>\n  ) \n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}