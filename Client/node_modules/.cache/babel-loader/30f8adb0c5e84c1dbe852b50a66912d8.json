{"ast":null,"code":"var _jsxFileName = \"/Users/rhysconnolly/SKEEEEET/client/src/components/components/ContractInteraction.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport MusicOwnership from './src/artifacts/MusicOwnership.json';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport styles from './CSS Modules/FileInputButtons-style.module.css';\nimport Big from 'big.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ContractInteraction(props) {\n  _s();\n\n  const [accounts, setAccounts] = useState([]);\n  const [web3, setWeb3] = useState(undefined);\n  const [contract, setContract] = useState(undefined);\n  const [uri, setUri] = useState(undefined);\n  const [tokenID, setTokenID] = useState(undefined);\n  const [url, setUrl] = useState(undefined);\n\n  async function init() {\n    try {\n      const uri = await props.CIDkey;\n      const tokenID = await props.tokenIDs;\n      console.log(tokenID);\n      const web3 = await new Web3(window.ethereum);\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = MusicOwnership.networks[networkId];\n      const contract = await new web3.eth.Contract(MusicOwnership.abi, deployedNetwork && deployedNetwork.address);\n      console.log(contract);\n      await setUri(uri);\n      await setTokenID(tokenID);\n      await setWeb3(web3);\n      await setAccounts(accounts);\n      await setContract(contract);\n      console.log(tokenID);\n      console.log(uri);\n    } catch (error) {\n      alert(`Failed to load web3, accounts or contract from the abi. Check console For details.`);\n      console.error(error);\n    }\n  }\n\n  async function Mint() {\n    if (uri === undefined || tokenID === undefined) {\n      alert('please ensure a file first and that you have entered a numerical Identification number');\n      throw 'please ensure a file first and that you have entered a numerical Identification number';\n    }\n\n    await contract.methods.mint(accounts[0], uri, tokenID).send({\n      from: accounts[0],\n      gas: 1000000\n    });\n  }\n\n  if (typeof web3 !== 'undefined' && typeof accounts !== 'undefined' && typeof contract !== 'undefined') {}\n\n  async function RetrieveTokenURL() {\n    if (tokenID === undefined) {\n      alert('please enter a numerical Identification number');\n      throw 'please enter a numerical Identification number';\n    }\n\n    const url = await contract.methods.tokenURI(tokenID);\n    setUrl(url);\n    console.log(url);\n  }\n\n  async function configureMoonbaseAlpha() {\n    const provider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n\n    if (provider) {\n      try {\n        await provider.request({\n          method: 'eth_requestAccounts'\n        });\n        await provider.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: '0x3',\n            chainName: 'Ropsten',\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n            },\n            rpcUrls: ['https://ropsten.infura.io/v3/b3b18fff97b6463ca552f9334d7fe15f'],\n            blockExplorerUrls: ['https://ropsten.etherscan.io']\n          }]\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      console.error('Please install MetaMask');\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.column,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"4.Submit Your Metadata and Mint your Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => init(),\n        children: \" ShowAccount \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => Mint(),\n        children: \" Mint Token \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => configureMoonbaseAlpha(),\n        children: \"Connect to BlockChain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => RetrieveTokenURL(),\n        children: \" check id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", accounts[0], \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", url, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 3\n  }, this);\n}\n\n_s(ContractInteraction, \"l5T84jCEJme/6fAEo8oyAz51aZM=\");\n\n_c = ContractInteraction;\nexport default ContractInteraction;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractInteraction\");","map":{"version":3,"sources":["/Users/rhysconnolly/SKEEEEET/client/src/components/components/ContractInteraction.js"],"names":["React","useState","MusicOwnership","Web3","detectEthereumProvider","styles","Big","ContractInteraction","props","accounts","setAccounts","web3","setWeb3","undefined","contract","setContract","uri","setUri","tokenID","setTokenID","url","setUrl","init","CIDkey","tokenIDs","console","log","window","ethereum","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","Contract","abi","address","error","alert","Mint","methods","mint","send","from","gas","RetrieveTokenURL","tokenURI","configureMoonbaseAlpha","provider","mustBeMetaMask","request","method","params","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","e","column"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport MusicOwnership from './src/artifacts/MusicOwnership.json'\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport styles from './CSS Modules/FileInputButtons-style.module.css';\nimport Big from 'big.js';\n\n\n  function ContractInteraction (props) {\n    const [accounts, setAccounts] = useState([]);\n    const [web3, setWeb3] = useState (undefined);\n    const [contract, setContract] = useState (undefined);\n    const [uri, setUri] = useState (undefined);\n    const [tokenID, setTokenID] = useState (undefined);\n    const [url, setUrl] = useState (undefined);\n\n\n    async function init() {\n             \n      try {\n          const uri = await (props.CIDkey); \n          const tokenID = await (props.tokenIDs);   \n          console.log(tokenID)                \n          const  web3 = await new Web3(window.ethereum);\n          const accounts = await  web3.eth.getAccounts();\n          const networkId = await web3.eth.net.getId();\n          const deployedNetwork = MusicOwnership.networks[networkId];\n          const contract = await new web3.eth.Contract(\n          MusicOwnership.abi,\n          deployedNetwork && deployedNetwork.address\n          );\n          console.log(contract)\n          await setUri(uri);\n          await setTokenID(tokenID);\n          await setWeb3(web3);\n          await setAccounts(accounts);\n          await setContract(contract);\n          console.log(tokenID);\n          console.log(uri);\n          }\n\n      catch (error) {\n        alert(`Failed to load web3, accounts or contract from the abi. Check console For details.`);\n        console.error(error);\n      }\n    }\n    \n    \n        async function Mint() {\n            if (uri === undefined || tokenID === undefined) {\n                alert('please ensure a file first and that you have entered a numerical Identification number');\n                throw('please ensure a file first and that you have entered a numerical Identification number');\n            }\n            \n            await contract.methods.mint(accounts[0],uri,tokenID).send({from:accounts[0], gas: 1000000});\n            }\n    \n            if(typeof web3 !== 'undefined'\n               && typeof accounts !== 'undefined'\n               && typeof contract !== 'undefined') {\n            }\n\n            async function RetrieveTokenURL() {\n            if (tokenID === undefined)\n            {\n              alert('please enter a numerical Identification number');\n              throw('please enter a numerical Identification number');\n            }\n\n            const url = await contract.methods.tokenURI(tokenID);\n            setUrl(url);\n            console.log((url));\n          }\n\n            async function configureMoonbaseAlpha() {\n                const provider = await detectEthereumProvider({\n                  mustBeMetaMask: true\n                })\n                if (provider) {\n                  try {\n                    await provider.request({ method: 'eth_requestAccounts'})\n                    await provider.request({\n                      method: 'wallet_addEthereumChain',\n                      params: [{\n                        chainId: '0x3', \n                        chainName: 'Ropsten',\n                        nativeCurrency: {\n                          name: 'ETH',\n                          symbol: 'ETH',\n                          decimals: 18\n                         },\n                        rpcUrls: ['https://ropsten.infura.io/v3/b3b18fff97b6463ca552f9334d7fe15f'],\n                        blockExplorerUrls: ['https://ropsten.etherscan.io']\n                      }]\n                    })\n                  } catch(e) {\n                    console.error(e);\n                  }  \n                } else {\n                  console.error('Please install MetaMask');\n                }\n              }\n                  \n\n  return (\n  <div className={styles.column}>\n        <h2>4.Submit Your Metadata and Mint your Token</h2>\n  <div>\n  <button onClick = {() => init()}> ShowAccount </button>\n  <button onClick = {() => Mint()}> Mint Token </button>\n  <button onClick={() => configureMoonbaseAlpha()}>Connect to BlockChain</button>\n  <button onClick = {() => RetrieveTokenURL()}> check id</button>\n  </div>\n  <div>\n  <h3>Account</h3>\n  <p> {accounts[0]} </p>\n  <p> {url} </p>\n  </div>\n  </div>\n  );\n}\nexport default ContractInteraction"]},"metadata":{},"sourceType":"module"}