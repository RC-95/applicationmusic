[{"/Users/rhysconnolly/Desktop/mymusicapp/Client/src/index.js":"1","/Users/rhysconnolly/Desktop/mymusicapp/Client/src/App.js":"2","/Users/rhysconnolly/Desktop/mymusicapp/Client/src/reportWebVitals.js":"3","/Users/rhysconnolly/Desktop/mymusicapp/Client/src/components/UploadFile.js":"4","/Users/rhysconnolly/Desktop/mymusicapp/Client/src/components/Header.js":"5","/Users/rhysconnolly/Desktop/mymusicapp/Client/src/components/UploadMetadata.js":"6","/Users/rhysconnolly/Desktop/mymusicapp/Client/src/components/ContractInteraction.js":"7"},{"size":500,"mtime":1636652579003,"results":"8","hashOfConfig":"9"},{"size":624,"mtime":1637531749977,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1636652579004,"results":"11","hashOfConfig":"9"},{"size":2208,"mtime":1637530914567,"results":"12","hashOfConfig":"9"},{"size":286,"mtime":1637347040216,"results":"13","hashOfConfig":"9"},{"size":2297,"mtime":1637585750308,"results":"14","hashOfConfig":"9"},{"size":8018,"mtime":1637760069646,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11z7k60",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/rhysconnolly/Desktop/mymusicapp/Client/src/index.js",[],"/Users/rhysconnolly/Desktop/mymusicapp/Client/src/App.js",[],"/Users/rhysconnolly/Desktop/mymusicapp/Client/src/reportWebVitals.js",[],"/Users/rhysconnolly/Desktop/mymusicapp/Client/src/components/UploadFile.js",["32"],"import React, {useState} from 'react'\nimport styles from './CSS Modules/FileInputButtons-style.module.css';\n\n///////Global Variables//////\nconst PROJECT_ID = '1z2zKzXJSnmfHxjLo8APH4Ljxhl';\nconst PROJECT_SECRET = '796b649fad2aac594c4767a8abcd7be4';\nvar Cid = '';\n\n\nfunction UploadFile() \n{\n  const [selectedFile, setSelectedFile] = useState();\n  const [isFilePicked, setIsFilePicked] = useState(false);\n  const [isSubmitted, setSubmission] = useState(false);\n\n   const changeHandler = (event) => {\n\t setSelectedFile(event.target.files[0]);\n    setIsFilePicked(true);\n  };\n     \n  async function handleSubmission() {\n\tconst formData = new FormData();\n\tawait formData.append('Submitted File', selectedFile);\n  console.log(formData);\n  \n  const xhr =  new XMLHttpRequest();\n  await xhr.open(\n    \"POST\",\n    \"https://ipfs.infura.io:5001/api/v0/add\"\n  );\n\n  await xhr.setRequestHeader(\n    \"Authorization\", \n    \"Basic\" + btoa(PROJECT_ID + \":\" + PROJECT_SECRET)\n  );\n\n  await xhr.send(formData); \n  \n   xhr.onload = () => {\n    Cid = JSON.parse(`${xhr.response}`);\n    setSelectedFile(Cid.Hash);\n    if (Cid.Hash =! null)\n      {\n        setSubmission(true);\n      }\n    }  \n  }\n\n    \n\n  return (\n  <div className = {styles.componentheaders}>\n    <div className = {styles.componentspacing}>\n      <h2>1. Upload An Audio Track:</h2>\n      <input type=\"file\" accept=\".mp3,.wav,.aiff,.FLAC\" name=\"file\" onChange={changeHandler} className={styles.customfileinput}/>\n      {isFilePicked ? (\n        <div>\n\t\t\t\t  <h5 className={styles.FileinputText}> File Name: {selectedFile.name} </h5>\n\t\t\t  </div>\n      ) : (\n      <p className={styles.uploadFile}></p>)}<br/>\n        <div>\n          <button className={styles.SubmitButton} onClick={handleSubmission} > Submit File</button> \n          {isSubmitted ? \n            (<div className={styles.URLallignment}>\n              <h5 className={styles.URLallignment}>Address: {'https://ipfs.io/ipfs/' + selectedFile} </h5>\n              <h5 className={styles.FileinputText}>SUCCESFULLY UPLOADED</h5>\n            </div> \n            ) : (\n            <p className={styles.uploadFile}></p>\n            ) \n          }\n        </div>\n    </div>\n  </div>\n);\n}\nexport default UploadFile","/Users/rhysconnolly/Desktop/mymusicapp/Client/src/components/Header.js",[],"/Users/rhysconnolly/Desktop/mymusicapp/Client/src/components/UploadMetadata.js",[],"/Users/rhysconnolly/Desktop/mymusicapp/Client/src/components/ContractInteraction.js",["33","34","35","36","37","38","39","40","41"],"import React, {useState} from 'react';\nimport MusicOwnership from '../artifacts/MusicOwnership.json';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport styles from './CSS Modules/FileInputButtons-style.module.css';\n\nfunction ContractInteraction (props) {\n\n  ///////Webpage State components///////\n  const [accounts, setAccounts] = useState([]); //state variable for accounts\n  const [web3, setWeb3] = useState (undefined); //web3 state\n  const [contract, setContract] = useState (undefined); //contract state\n  const [uri, setUri] = useState (undefined); //Uri code State\n  const [tokenID, setTokenID] = useState (undefined); //Token ID state\n  const [tokenExists, setTokenExists] = useState (false); //Triggers Token UI response on and off\n  const [reciever,setReciever ] = useState (undefined);\n  const [url, setUrl] = useState (undefined); //Metadata URL state\n  const [doesntExist, setDoesntExist] = useState(undefined); //switch for Token ID response\n  const [connectionStatus, setConnectionStatus] = useState(false);\n  const [owner, setOwner] = useState(undefined);\n  const [transactionStatus,setTransactionStatus] = useState(false);\n  \n    \n  //Initialise state variables and connect to Smart Contract//\n  async function init() {\n             \n    try {\n      const uri = await (props.CIDkey); \n      const tokenID = await (props.tokenIDs);   \n      const  web3 = await new Web3(window.ethereum);\n      const accounts = await  web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = MusicOwnership.networks[networkId];\n      const contract = await new web3.eth.Contract(\n      MusicOwnership.abi,\n      deployedNetwork && deployedNetwork.address\n      );\n      await setUri(uri);\n      await setWeb3(web3);\n      await setAccounts(accounts);\n      await setContract(contract);\n      }\n\n    catch (error) {\n      alert(`Failed to load web3, accounts or contract from the abi. Check console For details.`);\n      console.error(error);\n    }\n  }\n    \n  ///////Configure wallet and connect to Metamask///////\n\n  async function configureAndConnectMetamask() {\n    const provider = await detectEthereumProvider({\n      mustBeMetaMask: true\n      })\n    if (provider) {\n      try {\n        await provider.request({ method: 'eth_requestAccounts'})\n        await provider.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: '0x3', \n            chainName: 'Ropsten',\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n              },\n            rpcUrls: ['https://ropsten.infura.io/v3/b3b18fff97b6463ca552f9334d7fe15f'],\n            blockExplorerUrls: ['https://ropsten.etherscan.io']\n            }]\n          })\n        } \n      catch(e) {\n        console.error(e);\n        setConnectionStatus(true);\n        }  \n      } \n    else {\n      console.error('Please install MetaMask');\n      alert('Please install the MetaMask wallet extension in Chrome or Brave Browser');\n    }\n    await init();\n  }\n\n  ///////Function for submitting a token Id////////\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    console.log(props.showCIDs);\n    console.log(tokenID);\n    RetrieveTokenURL(tokenID);\n    }\n      \n  const handleChange = (e) => {\n  setTokenID(e.target.value)\n  }\n\n\n  ////////////Mint a new Token////////////\n  async function Mint() {\n    if (uri === undefined || tokenID === undefined) {\n      alert('please ensure a file first and that you have entered a numerical Identification number');\n      throw('please ensure a file is submitted first and that you have entered a numerical Identification number');\n    }\n             \n    let checkID = await contract.methods.tokenURI(tokenID).call();\n\n    if (checkID =! null)\n      {\n        alert('This ID number has been taken, please try a different number');\n        throw('This ID number has been taken, please try a different number');\n      }\n    try {\n        await contract.methods.mint(accounts[0],uri,tokenID).send({from:accounts[0], gas: 1000000});\n      }\n    catch(error) {\n      alert('Transaction Failed');\n      throw('Transaction Failed');\n    }\n    alert('You succesfully minted your token.');\n  }\n\n  ///User input for TokenID request///\n  const handleRecieverSubmit = (evt) => {\n    evt.preventDefault();\n    alert(`Submitting ID: ${reciever}`)\n    setReciever(reciever);\n    }\n  const handleRecieverChange = (e) => {\n  setReciever(e.target.value)\n  }\n\n  /////////Retrieve a Token's Metadata and source File/////////\n  async function RetrieveTokenURL() {\n    if (tokenID === undefined)\n      {\n        alert('please enter a numerical Identification number');\n        throw('please enter a numerical Identification number');\n      }\n            \n    try {\n      const url = await contract.methods.tokenURI(tokenID).call();\n      setUrl(url);\n      console.log(JSON.stringify(url));\n      const owner = await contract.methods.ownerOf(tokenID).call();\n      setOwner(owner);\n      setTokenExists(true);\n    }\n    catch(error){\n    setDoesntExist('This Token ID does not exist and is available to be used');\n    setTokenExists(false);\n    }\n  }\n\n              \n  async function TransferToken()  {\n    console.log(reciever);\n    console.log(tokenID);\n    console.log(accounts[0]);\n    if ({reciever} == null || {tokenID} == null || accounts[0] == null){\n      alert('Please ensure an address to send the token to has been submitted.\\nPlease also ensure a token identifier has been submitted')\n      throw('Please ensure an address to send the token to has been submitted.\\nPlease also ensure a token identifier has been submitted')\n    }\n\n    try {\n      await contract.methods.transferFrom(accounts[0],reciever,tokenID).send({from:accounts[0], gas: 1000000});\n      console.log(reciever)\n      setTransactionStatus(true);\n      }\n    catch(error)  {\n      alert('Transaction failed. \\nPlease ensure the token you wish to transfer exists and that you`re wallet contains the token');\n    }\n  }\n\n  return (\n    <div>\n      <div className = {styles.componentheaders}> \n        <div className = {styles.componentspacing}>\n        <h2>3. Connect To Your Wallet</h2>\n          <button onClick={() => configureAndConnectMetamask() }>Connect to Ropsten </button>\n        {connectionStatus ? (\n        <div> \n          <h3>Account:</h3>\n          <h5> {accounts[0]}</h5>\n        </div>) : (<h4>NotConnected</h4>)}\n        </div>\n      </div>\n     \n      <div className = {styles.componentheaders}> \n        <div className = {styles.componentspacing}>\n          <h2>4. Enter a TokenID</h2>\n          <form onSubmit= {handleSubmit}>\n          <input type=\"number\" value={tokenID} onChange= {handleChange}/>\n          <input type=\"submit\" value=\"Submit\" />\n          </form>\n\n          <div className={styles.column}>\n          {tokenExists ? (\n            <div>\n              <h3>Track {tokenID}:</h3> <h5>{url} </h5>\n              <h4>Owner of Track {tokenID}:</h4> <h5>{owner}</h5>\n            </div>\n            ) : (\n            <h4>{doesntExist}</h4>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className = {styles.componentheaders}> \n        <div className = {styles.componentspacing}>\n          <h2> 5. Mint Your Token</h2>\n          <button onClick = {() => Mint()}> Mint Token </button>\n        </div>\n      </div>\n\n      <div className = {styles.componentheaders}> \n        <div className = {styles.componentspacing}>\n          <h2>Transfer Ownership</h2>\n          <form onSubmit= {handleRecieverSubmit}> \n            <input type=\"text\" value={reciever} onChange= {handleRecieverChange}/>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n          {transactionStatus ? (\n         <h4>Transaction Was Succesfull</h4>\n          ) : (<p></p>)}\n          <button onClick={TransferToken}>Transfer Token</button>\n        </div>\n      </div>\n    </div>\n     \n  );\n}\nexport default ContractInteraction",{"ruleId":"42","severity":1,"message":"43","line":42,"column":9,"nodeType":"44","messageId":"45","endLine":42,"endColumn":25},{"ruleId":"46","severity":1,"message":"47","line":11,"column":10,"nodeType":"48","messageId":"49","endLine":11,"endColumn":14},{"ruleId":"46","severity":1,"message":"50","line":29,"column":13,"nodeType":"48","messageId":"49","endLine":29,"endColumn":20},{"ruleId":"51","severity":1,"message":"52","line":103,"column":7,"nodeType":"53","messageId":"54","endLine":103,"endColumn":116},{"ruleId":"42","severity":1,"message":"43","line":108,"column":9,"nodeType":"44","messageId":"45","endLine":108,"endColumn":24},{"ruleId":"46","severity":1,"message":"55","line":108,"column":9,"nodeType":"48","messageId":"49","endLine":108,"endColumn":16},{"ruleId":"51","severity":1,"message":"52","line":111,"column":9,"nodeType":"53","messageId":"54","endLine":111,"endColumn":79},{"ruleId":"51","severity":1,"message":"52","line":118,"column":7,"nodeType":"53","messageId":"54","endLine":118,"endColumn":35},{"ruleId":"51","severity":1,"message":"52","line":138,"column":9,"nodeType":"53","messageId":"54","endLine":138,"endColumn":65},{"ruleId":"51","severity":1,"message":"52","line":162,"column":7,"nodeType":"53","messageId":"54","endLine":162,"endColumn":139},"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-unused-vars","'web3' is assigned a value but never used.","Identifier","unusedVar","'tokenID' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'checkID' is assigned a value but never used."]